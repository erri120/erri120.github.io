<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Other on erri120's very random Blog</title><link>https://erri120.github.io/tags/other/</link><description>Recent content in Other on erri120's very random Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>CC BY 4.0</copyright><lastBuildDate>Fri, 15 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://erri120.github.io/tags/other/index.xml" rel="self" type="application/rss+xml"/><item><title>Everything about Unicode, Code Pages and Character Encoding</title><link>https://erri120.github.io/posts/2022-04-15/</link><pubDate>Fri, 15 Apr 2022 00:00:00 +0000</pubDate><guid>https://erri120.github.io/posts/2022-04-15/</guid><description>Time and Encodings are the two things a programmer never wants to touch. Thankfully dealing with time has been made very easy, we developed ISO Standards, created standard libraries with good time functions and don&amp;rsquo;t have to worry until 2038 when a signed 32-bit integer is unable to hold the number of seconds elapsed since the Unix epoch.
Encodings did not receive this kind of treatment until the emergence of Unicode but even then we still have massive issues when dealing with them.</description><content>&lt;p>Time and Encodings are the two things a programmer never wants to touch. Thankfully dealing with time has been made very easy, we developed ISO Standards, created standard libraries with good time functions and don&amp;rsquo;t have to worry until 2038 when a signed 32-bit integer is unable to hold the number of seconds elapsed since the Unix epoch.&lt;/p>
&lt;p>Encodings did not receive this kind of treatment until the emergence of Unicode but even then we still have massive issues when dealing with them.&lt;/p>
&lt;h2 id="history">History&lt;/h2>
&lt;p>If you don&amp;rsquo;t want to read through this history class I prepared, you can skip directly to the more interesting topic here: &lt;a href="#encoding-code-pages-and-unicode-for-programmers">Encoding, Code Pages and Unicode for Programmers&lt;/a>&lt;/p>
&lt;h3 id="electrical-telegraphy">Electrical Telegraphy&lt;/h3>
&lt;p>One of the earliest encoding methods is Morse Code which was introduced in the 1840s. The earliest code used commercially was the Cooke and Wheatstone telegraph five needle code, aka &lt;em>C&amp;amp;W5&lt;/em>, but no one really used it. Instead each country went ahead and developed their own code leading to the creation of the American Morse Code:&lt;/p>
&lt;img src="https://erri120.github.io/img/posts/2022-04-15/American_Morse_Code.png" alt="American Morse Code" class="left" />
&lt;p>This code had issues so a fellow German named Friedrich Clemens Gerke developed a modified version in 1848 for use on German railways. At that time many central European countries belonged to the German-Austrian Telegraph Union so they quickly decided to adopt this version across all its countries in 1851.&lt;/p>
&lt;p>Due to the widespread use of the Gerke Code it became the International Morse Code in 1865:&lt;/p>
&lt;img src="https://erri120.github.io/img/posts/2022-04-15/International_Morse_Code.png" alt="International Morse Code" class="left" />
&lt;p>Even though it is called the &amp;ldquo;International&amp;rdquo; Morse Code, US companies refused to adopt it and continued to use the American Morse Code. They didn&amp;rsquo;t want to re-train their operators and because the telegraph was not state controlled but multiple private companies worked together, they never adopted it.&lt;/p>
&lt;p>So why am I telling you this 180 year old story? Back then we already were unable to come to a consensus on what standard to use. The Gerke Code was adopted by the German-Austrian Telegraph Union but each country developed their own Code at some point because they used special characters in their language. This has been the biggest problem throughout the years. In Europe we mostly use Latin-based alphabets but over in Asia things looked different:&lt;/p>
&lt;img src="https://erri120.github.io/img/posts/2022-04-15/chinese_telegraph_code.jpg" alt="Chinese Telegraph Code" class="left" />
&lt;p>This is &lt;strong>one page&lt;/strong> from the Chinese Telegraph Code book. There are nearly &lt;strong>10 thousand characters&lt;/strong> in this book.&lt;/p>
&lt;p>This is another recurring theme across history. Languages use different alphabets or non at all. A Logography uses written characters that represent a word or morpheme, like Chinese characters. This makes creating encodings for use everywhere really hard because now you don&amp;rsquo;t have 26 letters in lower and uppercase and a few syntax characters but thousands of characters that have their own meaning. Most of the technological advancements in telegraphy and digital computers happend in Europe or USA, Asia was often left out and new encodings would focus on Latin-based alphabets.&lt;/p>
&lt;h3 id="automatic-telegraphy">Automatic Telegraphy&lt;/h3>
&lt;p>In 1846 someone had the genius idea of automatically generating morse code. Previously if you want to transmit a message, you&amp;rsquo;d go through each letter, look at the Morse Code table and press the required taps.&lt;/p>
&lt;p>But what if you had a machine with multiple keys where each key corresponds to a different entry in the Morse Code table? A machine with multiple keys where each input corresponds to a different output, where have I heard that before? How about a piano:&lt;/p>
&lt;img src="https://erri120.github.io/img/posts/2022-04-15/Printing_Telegraph.jpg" alt="Printing Telegraph" class="left" />
&lt;p>Piano keyboards existed for a long time and are really easy to understand. If you want to transmit an &lt;code>A&lt;/code> you just press the key that is marked with an &lt;code>A&lt;/code>. No need to look into some weird table and get hand pain by pressing the same key in different intervals for the entire day.&lt;/p>
&lt;p>But let us not get side-tracked by random history and focus on out main topic: encoding. With these new printing telegraphs the operator stopped sending dots and dashes directly with a single key but instead operated a piano keyboard and a machine which would generated the appropriate Morse Code Point based on the key pressed.&lt;/p>
&lt;p>The Morse Code was designed to be used by humans so common letters were easier to &amp;ldquo;type&amp;rdquo; by requiring less inputs. In the 1870s Émile Baudot created a new Code to be used by machines instead of humans to make sending and receiving even easier:&lt;/p>
&lt;img src="https://erri120.github.io/img/posts/2022-04-15/Baudot_Code.png" alt="Baudot Code" class="left" />
&lt;p>The Baudot Code is a 5-bit fixed-length binary code and next most important invention after the Morse Code. It is also known as the International Telegraph Alphabet No. 1 (ITA1).&lt;/p>
&lt;p>If there is a No. 1, there must be a No. 2 so in 1901 Donal Murray modified Baudot Code to create the Murray Code. This code was used with punched paper tape so now a reperforator could be used to make a perforated copy of received messages and a tape transmitter can send messages from punched tapes. Instead of directly transmitting to the line, the keypresses of the operator would punch holes instead, making transmitting multiple messages from one tape very fast.&lt;/p>
&lt;p>Operator fatigue was no longer an issue so Murray focused on minimising machine wear and had to add &lt;em>control characters&lt;/em> to control the machine. These characters are &lt;em>Carriage Return&lt;/em> and &lt;em>Line Feed&lt;/em> also known as CR and LF. If you every wondered where those came from, now you know.&lt;/p>
&lt;p>In 1924 the International Telegraph Union created the International Telegraph Alphabet No. 2 (ITA2), based on Murray Code, which became the most widespread code as nearly all 20th-century teleprinter equipment used ITA2 or some variant of it.&lt;/p>
&lt;h3 id="1960s">1960s&lt;/h3>
&lt;p>ITA2 was very successful but we were going digital. Here are some inventions from this era to paint a picture: IBM created the IBM 704 in 1954 which was the first mass-produced computer with floating-point arithmetic hardware, the first transatlantic communications cable was laid down in 1956 and MIT and Bell Labs created the first Modem in 1959.&lt;/p>
&lt;p>Things started to become digital and electronics became more important. Teleprinter technology also advanced and people wanted to use lowercase characters and additional punctuations so in 1964 the American Standards Association created the famous 7-bit ASCII Code also known as US-ASCII:&lt;/p>
&lt;img src="https://erri120.github.io/img/posts/2022-04-15/ASCII_Code_Chart.png" alt="ASCII Code Chart" class="left" />
&lt;h3 id="ibm-and-code-pages">IBM and Code Pages&lt;/h3>
&lt;p>IBM with their mainframe computers played a very important role for us. IBM was a chief proponent of the ASCII standardization committee however they did not have enough time to prepare ASCII peripherals to ship with the IBM System/360 in 1964. This was a big problem so the company created the Extended Binary Coded Decimal Interchange Code (EBCDIC) which is an 8-bit character set.&lt;/p>
&lt;p>The IBM System/360 was extremely successful so EBCDIC was as well. This was a problem, you now have ASCII which IBM really liked and EBCDIC which was used everywhere because everyone used the IBM System/360.&lt;/p>
&lt;p>EBCDIC and ASCII were not compatible with each other which resulted in issues when transferring data to a system that uses the other encoding.&lt;/p>
&lt;p>With EBCDIC came these new things called &lt;em>Code Pages&lt;/em>. Not everyone speaks English and as we have seen before, some languages use a Latin-based alphabet, some use a non-Latin-based alphabet some don&amp;rsquo;t use an alphabet at all but logography instead. Not only that but we are currently in the late 20th century where 20-megabyte drives costs 250 USD so we have to be space efficient.&lt;/p>
&lt;p>For these reasons, IBM created code pages for the EBCDIC character set which are represented by a number and change the way you encode certain characters. One important thing I want to mention is that IBM created the code pages but not the standard that was behind it. As an example let&amp;rsquo;s look at JIS X 0201 which is a Japanese Industrial Standard developed in 1969 and was implemented by IBM as Code Page 897. IBM did not create the standard, they only created the code page that implemented it.&lt;/p>
&lt;h3 id="8-bit-architecture">8-bit architecture&lt;/h3>
&lt;p>In 1980s the 8-bit architecture led to the 8-bit byte becoming the standard unit of computer storage so ASCII with it&amp;rsquo;s 7-bit length was inconvenient for data retrieval. Thus in 1987 we got the standard ISO 8859-1 aka Extended ASCII which uses the extra bit for more non-English characters like accented vowels and some currency symbols.&lt;/p>
&lt;h3 id="going-unicode">Going Unicode&lt;/h3>
&lt;p>It is the year 1980 and a company named Xerox created the Xerox Character Code Standard (XCCS) which is 16-bit in length and encodes the characters required for languages using the Latin, Arabic, Hebrew, Greek and Cyrillic scripts, the Chinese, Japanese and Korean writing systems, and technical symbols.&lt;/p>
&lt;p>A group with members of Xerox and Apple started thinking about a universal character set in 1987 and used the XCCS as an inspiration. This group quickly grew as people from Sun Microsystems, Microsoft and other companies started to join.&lt;/p>
&lt;p>The Unicode Consortium which was incorporated in early 1991 published the first volume of the Unicode Standard later that year and the second volume in the next year to include a total of 28,327 characters.&lt;/p>
&lt;h2 id="encoding-code-pages-and-unicode-for-programmers">Encoding, Code Pages and Unicode for Programmers&lt;/h2>
&lt;p>Now that the history class is over we can look at some code.&lt;/p>
&lt;h3 id="windows-api">Windows API&lt;/h3>
&lt;p>If you ever wrote some C/C++ code and had to work with the Windows API you might wonder why there are multiple versions of the same function like &lt;code>MessageBox&lt;/code>, &lt;code>MessageBoxA&lt;/code> and &lt;code>MessageBoxW&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">MessageBoxA&lt;/span>(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">MessageBoxW&lt;/span>(HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#ifdef UNICODE
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">#define MessageBox MessageBoxW
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#else
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">#define MessageBox MessageBoxA
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;a href="https://docs.microsoft.com/en-us/windows/win32/intl/conventions-for-function-prototypes">docs&lt;/a> say &lt;code>A&lt;/code> means &lt;em>ANSI&lt;/em> and the &lt;code>W&lt;/code> stands for &lt;em>Unicode&lt;/em> but this is a bit misleading so here is an explanation.&lt;/p>
&lt;p>First &lt;em>ANSI&lt;/em> is just straight up confusing and a &amp;ldquo;misnomer&amp;rdquo;.&lt;/p>
&lt;blockquote>
&lt;p>A misnomer is a name that is incorrectly or unsuitably applied.&lt;/p>
&lt;/blockquote>
&lt;p>Microsoft themselves said it&amp;rsquo;s stupid&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>:&lt;/p>
&lt;blockquote>
&lt;p>ANSI: Acronym for the American National Standards Institute. The term “ANSI” as used to signify Windows code pages is a historical reference, but is nowadays a misnomer that continues to persist in the Windows community. The source of this comes from the fact that the Windows code page 1252 was originally based on an ANSI draft—which became International Organization for Standardization (ISO) Standard 8859-1. “ANSI applications” are usually a reference to non-Unicode or code page–based applications.&lt;/p>
&lt;/blockquote>
&lt;p>So going forward I&amp;rsquo;m just going to call it &amp;ldquo;Windows Code Pages&amp;rdquo;.&lt;/p>
&lt;p>Next up is the &lt;code>W&lt;/code> for &lt;em>Unicode&lt;/em>. The &lt;code>W&lt;/code> comes from &lt;code>wchar_t&lt;/code> which is an &lt;strong>implementation-defined&lt;/strong> wide character type. In the Microsoft compiler, it represents a 16-bit wide character used to store Unicode encoded as UTF-16LE.&lt;/p>
&lt;p>So let&amp;rsquo;s recap:&lt;/p>
&lt;ul>
&lt;li>&lt;code>MessageBoxA&lt;/code>: accepts the 8-bit &lt;code>char&lt;/code> type and uses the Windows Code Pages&lt;/li>
&lt;li>&lt;code>MessageBoxW&lt;/code>: accepts the implementation-defined wide &lt;code>wchar_t&lt;/code> type and uses UTF-16&lt;/li>
&lt;li>&lt;code>MessageBox&lt;/code>: just an alias that will use either &lt;code>MessageBoxA&lt;/code> or &lt;code>MessageBoxW&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>The fact that &lt;code>wchar_t&lt;/code> is implementation-defined is obviously a problem. Windows adopted Unicode when it fit in a 16-bit long type but that is not the case anymore.&lt;/p>
&lt;p>Now for some code and some experiments:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define WIN32_LEAN_AND_MEAN
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;Windows.h&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MessageBoxA(&lt;span style="color:#66d9ef">nullptr&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;This uses Windows Code Pages&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nullptr&lt;/span>, MB_OK);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MessageBoxW(&lt;span style="color:#66d9ef">nullptr&lt;/span>, &lt;span style="color:#e6db74">L&lt;/span>&lt;span style="color:#e6db74">&amp;#34;This uses UTF-16&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nullptr&lt;/span>, MB_OK);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">constexpr&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> helloShiftJis[] &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#66d9ef">static_cast&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>(&lt;span style="color:#ae81ff">0x82&lt;/span>), &lt;span style="color:#66d9ef">static_cast&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>(&lt;span style="color:#ae81ff">0xB1&lt;/span>), &lt;span style="color:#66d9ef">static_cast&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>(&lt;span style="color:#ae81ff">0x82&lt;/span>), &lt;span style="color:#66d9ef">static_cast&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>(&lt;span style="color:#ae81ff">0xF1&lt;/span>), &lt;span style="color:#66d9ef">static_cast&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>(&lt;span style="color:#ae81ff">0x82&lt;/span>), &lt;span style="color:#66d9ef">static_cast&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>(&lt;span style="color:#ae81ff">0xC9&lt;/span>), &lt;span style="color:#66d9ef">static_cast&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>(&lt;span style="color:#ae81ff">0x82&lt;/span>), &lt;span style="color:#66d9ef">static_cast&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>(&lt;span style="color:#ae81ff">0xBF&lt;/span>), &lt;span style="color:#66d9ef">static_cast&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>(&lt;span style="color:#ae81ff">0x82&lt;/span>), &lt;span style="color:#66d9ef">static_cast&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>(&lt;span style="color:#ae81ff">0xCD&lt;/span>), &lt;span style="color:#e6db74">&amp;#39;\0&amp;#39;&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MessageBoxA(&lt;span style="color:#66d9ef">nullptr&lt;/span>, helloShiftJis, &lt;span style="color:#66d9ef">nullptr&lt;/span>, MB_OK);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MessageBoxW(&lt;span style="color:#66d9ef">nullptr&lt;/span>, &lt;span style="color:#e6db74">L&lt;/span>&lt;span style="color:#e6db74">&amp;#34;こんにちは&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nullptr&lt;/span>, MB_OK);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The first two calls show what you&amp;rsquo;d expect to see as they only contain Latin characters. The other calls are more interesting. This hideous array initialization contains the bytes of &amp;ldquo;こんにちは&amp;rdquo; encoded in Shift-JIS. My system locale is set to &amp;ldquo;English (United States)&amp;rdquo; which means my Windows uses Code Page 1252 aka &lt;code>windows-1252&lt;/code>. This Code Page does not contain any of the Hiragana characters so instead of seeing &amp;ldquo;こんにちは&amp;rdquo; on screen I get &amp;ldquo;‚±‚ñ‚É‚¿‚Í&amp;rdquo;. If change my system locale to &amp;ldquo;Japanese (Japan)&amp;rdquo; then Windows would use Shift-JIS aka &lt;code>windows-932&lt;/code> and display &amp;ldquo;こんにちは&amp;rdquo; correctly. The &lt;code>MessageBoxW&lt;/code> call with &lt;code>L&amp;quot;こんにちは&amp;quot;&lt;/code> correctly displays &amp;ldquo;こんにちは&amp;rdquo; because it&amp;rsquo;s UTF-16 encoded.&lt;/p>
&lt;p>The Windows API also provides functions for converting between string types:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// convert from a Code Page to UTF-16
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">MultiByteToWideChar&lt;/span>(UINT CodePage, dwFlags, LPCCH lpMultiByteStr, &lt;span style="color:#66d9ef">int&lt;/span> cbMultiByte, LPWSTR lpWideCharStr, &lt;span style="color:#66d9ef">int&lt;/span> cchWideChar);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// convert from UTF-16 to a Code Page
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">WideCharToMultiByte&lt;/span>(UINT CodePage, DWORD dwFlags, LPCWCH lpWideCharStr, &lt;span style="color:#66d9ef">int&lt;/span> cchWideChar, LPSTR lpMultiByteStr, &lt;span style="color:#66d9ef">int&lt;/span> cbMultiByte, LPCCH lpDefaultChar, LPBOOL lpUsedDefaultChar);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>With the first function we can convert our Shift-JIS encoded string into UTF-16 and correctly display it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">auto&lt;/span> bufferSize &lt;span style="color:#f92672">=&lt;/span> MultiByteToWideChar(&lt;span style="color:#ae81ff">932&lt;/span>, MB_ERR_INVALID_CHARS, helloShiftJis, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#66d9ef">nullptr&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">auto&lt;/span> converted &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#66d9ef">wchar_t&lt;/span>[bufferSize];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MultiByteToWideChar(&lt;span style="color:#ae81ff">932&lt;/span>, MB_ERR_INVALID_CHARS, helloShiftJis, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, converted, bufferSize);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MessageBoxW(&lt;span style="color:#66d9ef">nullptr&lt;/span>, converted, &lt;span style="color:#66d9ef">nullptr&lt;/span>, MB_OK);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="current-issues">Current Issues&lt;/h3>
&lt;p>We have looked at the history of character encodings and some examples with the Windows API. Now it&amp;rsquo;s time to take a look some of the issues we still have.&lt;/p>
&lt;p>The Web is united under UTF-8 with over 98% of all web pages using it&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>. This is further enforced by standards like JSON which require UTF-8 encoding. As good as this is, the desktops are still far behind UTF-8 adoption.&lt;/p>
&lt;p>Windows started supporting UTF-8 with Windows XP but only since Windows 10 version 1903 is it the default character encoding for Notepad&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>. These editors are the main culprits as they often default to the current Windows Code Page which makes sharing files internationally a pain.&lt;/p>
&lt;p>Thankfully everything is starting to or already using UTF-8, most newer languages like Go and Rust basically force you to use UTF-8 and even Microsoft said you should start using it&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Windows Code Pages are legacy but because it&amp;rsquo;s still used in production we continue to have issues with character encoding. If you have some issues I recommend trying &lt;a href="https://github.com/xupefei/Locale-Emulator">Locale Emulator&lt;/a>.&lt;/p>
&lt;h2 id="closing-words">Closing Words&lt;/h2>
&lt;p>Props to you if you read this entire thing. I personally had to deal a lot with encoding issues as a lot of games I play come from Japan and don&amp;rsquo;t work on my machine without a locale emulator.&lt;/p>
&lt;p>I hope this answered some questions you might had around this topic. It is very complex and has a very long history but this should give you a peak into the issues we still have.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="https://web.archive.org/web/20181208141313/https://msdn.microsoft.com/en-us/goglobal/bb964658.aspx#a">https://web.archive.org/web/20181208141313/https://msdn.microsoft.com/en-us/goglobal/bb964658.aspx#a&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>&lt;a href="https://w3techs.com/technologies/cross/character_encoding/ranking">https://w3techs.com/technologies/cross/character_encoding/ranking&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>&lt;a href="https://www.winhelponline.com/blog/set-default-encoding-notepad-ansi-utf-8/">https://www.winhelponline.com/blog/set-default-encoding-notepad-ansi-utf-8/&lt;/a>&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>&lt;a href="https://docs.microsoft.com/en-us/windows/apps/design/globalizing/use-utf8-code-page">https://docs.microsoft.com/en-us/windows/apps/design/globalizing/use-utf8-code-page&lt;/a>&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></content></item><item><title>Fixing Anno 2070 by changing three bytes</title><link>https://erri120.github.io/posts/2021-12-10/</link><pubDate>Fri, 10 Dec 2021 10:00:00 +0100</pubDate><guid>https://erri120.github.io/posts/2021-12-10/</guid><description>I love Anno 2070. The game released in 2011 and I bought the Königsedition, a special deluxe edition containing the base game, the Deep Ocean DLC, a poster and the entire soundtrack on 3 CDs, back in 2013. I played this game to death, it is my most played strategy game and I have often look back at the fun I had while playing. If you never played the game and went on Steam you might notice it has a Mixed rating.</description><content>&lt;p>I love Anno 2070. The game released in 2011 and I bought the &lt;em>Königsedition&lt;/em>, a special deluxe edition containing the base game, the &lt;em>Deep Ocean&lt;/em> DLC, a poster and the entire soundtrack on 3 CDs, back in 2013. I played this game to death, it is my most played strategy game and I have often look back at the fun I had while playing. If you never played the game and went on Steam you might notice it has a &lt;em>Mixed&lt;/em> rating. This might seem weird considering I just told you how awesome this game is. But the ratings reflect the current state very well: you can&amp;rsquo;t fucking play the game.&lt;/p>
&lt;h2 id="why-the-game-is-unplayable">Why the game is unplayable&lt;/h2>
&lt;p>Did you think Cyberpunk 2077 at launch was bad with all the glitches and bugs? At least you could play that game and somewhat enjoy it. Now look at this 10 year old game that you can&amp;rsquo;t even fucking play and Ubisoft completely abandoned it. A studio abandoning their games is nothing new and often not a problem. It might suck that the multipler servers of your favourite game go offline but you could at least continue playing the campaign or the community might start hosting servers.&lt;/p>
&lt;p>So what do I mean with &amp;ldquo;you can&amp;rsquo;t fucking play the game&amp;rdquo;? Let&amp;rsquo;s imagine an obstacle course where the finish is the main menu of the game. To get to the main menu you first have to start the game either through Uplay, Steam or by starting the &lt;code>Anno5.exe&lt;/code> directly. The first obstacle is Uplay itself. I can not count the number of times Uplay had some error or bug that lead to me not playing a game. Back when Assassins Creed Unity came out, Uplay thought my saves were ephemeral and I had to replay the first 5 hours of the game more than 13 times. The launcher is a complete dumpster fire and worse than the League of Legends client.&lt;/p>
&lt;p>If you start Anno 2070 then Uplay will also launch and probably kill the process and start the Auto Updater. If that happens you are fucked because now the &amp;ldquo;Auto Updater&amp;rdquo; will try to auto update your game, even though it&amp;rsquo;s already updated. Once it&amp;rsquo;s done &lt;em>updating&lt;/em> it will start the game which will start Uplay which will probably start the updater again. If you bought the game on Steam then you have to flip a coin and if it lands on heads you are fucked and Uplay doesn&amp;rsquo;t think you own the game. If you somehow did manage to convince Uplay to work for once you are now faced with the login screen.&lt;/p>
&lt;p>The login screen. You open a website, click the login button, enter your username + password and log in to your account. But why do you have to log in to your account in Anno 2070? Some time around 2013 Ubisoft had the genius idea of switching up their entire account system. Anno 2070 was caught up in the transition and somehow came out as an abomination where the login is more broken than Fallout 76 on release &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. So what username + password do you use in Anno 2070? If you think you have to use your Uplay account then you&amp;rsquo;re wrong. If you choose your Steam credentials then you are also wrong. You have to use the credentials of the account you used to register the game. In my case it&amp;rsquo;s not my main Uplay account because it didn&amp;rsquo;t even existed back then. Now here is the fun part: I still own the game on Uplay. It is in my library but I can&amp;rsquo;t use my account because the &lt;em>key&lt;/em> is not linked to my actual Uplay account. I put emphasis on &lt;em>key&lt;/em> because that is our next hurdle. Even if you manage to log in you will probably be asked about the key however your key might be linked to another account even though that account doesn&amp;rsquo;t have the game in their Uplay library. I don&amp;rsquo;t even know how this exactly works with Steam users but I can imagine it doesn&amp;rsquo;t.&lt;/p>
&lt;p>I hope you come to understand how utterly broken the start procedure of Anno 2070 is. Back in the day when Ubisoft used something called &lt;em>SolidShield&lt;/em> the process was even more fucked. Your key was not only tied to some random account but also to your hardware directly meaning if you upgraded your GTX 580 to a GTX 590 your key would not work &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>. If you somehow think this is just the rabbling of an insane person then you are correct but I would also like you to check out the Steam reviews and this great post on reddit &amp;ldquo;&lt;a href="https://www.reddit.com/r/CrackWatch/comments/7wejnm/ubisofts_anno_2070_unplayable_due_to_drm/">Ubisoft&amp;rsquo;s Anno 2070 Unplayable Due to DRM&lt;/a>&amp;rdquo; for more salt.&lt;/p>
&lt;h2 id="fixing-the-game">Fixing the game&lt;/h2>
&lt;p>Edit: Before we dive into this I want to tell you that there are other potential fixes to this problem. Some people messaged me and askes why I didn&amp;rsquo;t do X or Y and my answer was always &amp;ldquo;It didn&amp;rsquo;t worked&amp;rdquo;. If you have a similar problem with Anno 2070 then there are other solutions you can try. The fix I will propose is guaranteed to work but should be a last resort.&lt;/p>
&lt;p>Now that I cooled off and finished my rant it&amp;rsquo;s time to talk about how we can fix everything. If you want to follow along you need to get the latest version from Uplay or Steam. It has the version number &lt;code>2.0.7792.0&lt;/code> and the SHA256 hash of &lt;code>Anno5.exe&lt;/code> is &lt;code>C76D42E71AF6A7D1786C6846091A5FBDDB13E3A88A72E469F36F9F365645D58A&lt;/code>. If you don&amp;rsquo;t want an explanation of how I got here you can skip to the &lt;a href="#tldr-if-you-dont-want-an-explanation">TL;DR&lt;/a> but if you want to hear the explanation then knowing assembly and basic programming is recommended.&lt;/p>
&lt;p>The goal is to force the game into offline mode. Simply changing your firewall settings to block all connections from the executable is not the solution because, as explained earlier, we also need to deal with Uplay. There is actually a single function responsible for launching Uplay. The standard solution would be to either replace the function with &lt;code>NOP&lt;/code> instructions or replace the &lt;code>CALL&lt;/code> instruction with &lt;code>NOP&lt;/code>. This would probably work, however I found something better. This &lt;code>InitializeUplay&lt;/code> function gets called only once: during a pre-init function of the game inside a condition. There is actually a &lt;code>JNZ&lt;/code> instruction which will skip the function call entirely.&lt;/p>
&lt;p>The comparison at &lt;code>004b05bf&lt;/code> (&lt;code>80 7e 50 00 bb 10 00 00 00&lt;/code>) compares whatever is at &lt;code>ESI+50&lt;/code> with &lt;code>0&lt;/code> meaning that the &lt;code>JNZ&lt;/code> jump at &lt;code>004b05c8&lt;/code> will be taken if &lt;code>ESI+50&lt;/code> is not &lt;code>0&lt;/code>. This is never the case and I don&amp;rsquo;t really understand what the condition actually represents but we can exploit this and make sure the jump is always taken. Since &lt;code>ESI+50&lt;/code> is always &lt;code>0&lt;/code> we can just change the comparison to compare &lt;code>ESI+50&lt;/code> with &lt;code>1&lt;/code>: &lt;code>80 7e 50 01&lt;/code>. With this you can launch the game and Uplay will never start.&lt;/p>
&lt;p>Next up is the login screen. This took me the longest to figure out. I found the Uplay initialization within a few hours but this took me an entire day. We can&amp;rsquo;t really skip the login screen, trust me I tried that, but instead we just have to trick the game that we are offline and want to play in offline mode. I used to play a lot in offline and back in the day you still had to put your username + password and click login at which point the game will see you are offline and then loads your offline profile. So now it&amp;rsquo;s time to find the callback function of the login button. I did manage to find the callback function and noticed a little function that returns a &lt;code>WebAdapter&lt;/code> based on the argument. Lets name this function &lt;code>CreateWebAdapter(int x)&lt;/code> with &lt;code>x = 0&lt;/code> returning an &lt;strong>offline web adapter&lt;/strong> and &lt;code>x = 1&lt;/code> the normal one.&lt;/p>
&lt;p>My spidey senses were tingling and I knew this was related to the solution. The login button callback function however will always call &lt;code>CreateWebAdapter(1)&lt;/code>. You could change the &lt;code>1&lt;/code> to a &lt;code>0&lt;/code> but I noticed something different. You see, the login frame is created programmatically and you can clearly see where the username textbox, password textbox, remember user id checkbox, register account button and login button get added to the frame. In order to figure out which button has what callback I put a breakpoint on every callback function and clicked every button. However there was 1 &lt;em>unused&lt;/em> button. I&amp;rsquo;m not sure if it&amp;rsquo;s unused or only conditionally used but guess what function the callback calls: &lt;code>CreateWebAdapter(0)&lt;/code>. This possibly unused callback function was very similar to the login button callback but it will always use the offline web adapter. I was very excited when I found out about this and immediately changed the callback function of the login button to use the callback function of the unused button by changing the &lt;code>PUSH&lt;/code> instruction at &lt;code>0068a57b&lt;/code> from &lt;code>68 90 9c 68 00&lt;/code> to &lt;code>68 d0 8f 68 00&lt;/code> and it fucking worked. You can now log in and start in offline mode.&lt;/p>
&lt;img src="https://erri120.github.io/img/posts/2021-12-10/Anno_2070_Main_Menu.jpg" alt="Anno 2070 Main Menu" class="left" />
&lt;h3 id="tldr-if-you-dont-want-an-explanation">TL;DR if you don&amp;rsquo;t want an explanation&lt;/h3>
&lt;ol>
&lt;li>Change the &lt;code>CMP&lt;/code> instruction at &lt;code>004b05bf&lt;/code> (&lt;code>80 7e 50 00 bb 10 00 00 00&lt;/code>) from &lt;code>80 7e 50 00&lt;/code> to &lt;code>80 7e 50 01&lt;/code>&lt;/li>
&lt;li>Change the &lt;code>PUSH&lt;/code> instruction at &lt;code>0068a57b&lt;/code> from &lt;code>68 90 9c 68 00&lt;/code> to &lt;code>68 d0 8f 68 00&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>If you did everything right the SHA256 hash of the modified &lt;code>Anno5.exe&lt;/code> file should be &lt;code>01E123A72C3DCB4FB1E018A685692F57B9586FF4F187BB23B09D8B93D754C268&lt;/code>. If that is not the case you did something wrong and your game is probably broken so load your backup and try again.&lt;/p>
&lt;h2 id="anno-2070-setting-tips">Anno 2070 setting tips&lt;/h2>
&lt;p>In case you want to play Anno 2070 after reading this post here are some changes you might want to make in your settings file. The file is located in &lt;code>%appdata%/Ubisoft/Anno 2070/Config/Engine.ini&lt;/code>&lt;/p>
&lt;ul>
&lt;li>change language by editing &lt;code>&amp;lt;LanguageTAG&amp;gt;ger&amp;lt;/LanguageTAG&amp;gt;&lt;/code>&lt;/li>
&lt;li>skip the intro with &lt;code>&amp;lt;SkipIntro&amp;gt;1&amp;lt;/SkipIntro&amp;gt;&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="afterword">Afterword&lt;/h2>
&lt;p>This project has been a lot of fun and ended rather suddenly. I initially allotted 3 full days to this endeavour but I kept finding new leads and getting new ideas so I ended up only spending around 12.5 hours (I love how x32dbg will tell you how much time you have wasted debugging). The solution is also very simple and I made it the title of this post. Just 3 bytes to fix the entire start of the game. I thought I would have to modify a lot functions or write some DLL I&amp;rsquo;d have to inject but no, you just change 3 bytes and be happy :)&lt;/p>
&lt;p>I hope you found this post somewhat interesting and maybe you can finally play Anno 2070. If this works for you please do tell me below.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="https://www.youtube.com/watch?v=T6HdBplLmuU">https://www.youtube.com/watch?v=T6HdBplLmuU&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>&lt;a href="https://www.guru3d.com/news-story/why-guru3d-probably-never-will-review-ubisoft-titles-anymore-anno-2070.html">https://www.guru3d.com/news-story/why-guru3d-probably-never-will-review-ubisoft-titles-anymore-anno-2070.html&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></content></item></channel></rss>