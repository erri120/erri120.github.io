<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on erri120's Blog</title><link>https://erri120.github.io/posts/</link><description>Recent content in Posts on erri120's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>CC BY 4.0</copyright><lastBuildDate>Thu, 18 Nov 2021 12:18:00 +0100</lastBuildDate><atom:link href="https://erri120.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Reworking rpgmpacker: Moving from C++ to TypeScript</title><link>https://erri120.github.io/posts/2021-11-18/</link><pubDate>Thu, 18 Nov 2021 12:18:00 +0100</pubDate><guid>https://erri120.github.io/posts/2021-11-18/</guid><description>rpgmpacker has been one of my biggest non-modding related projects on GitHub and the only reason people visit my blog:
The developer of the game Star Knightess Aura (NSFW) is the first actual user of this tool and contributed a good amount of issues on GitHub driving the development of this project forward.
With some issues still open I stopped working on this project in April 2021 because I knew I had to rework this tool at some point and didn&amp;rsquo;t had the motivation to do so at that time.</description><content>&lt;p>&lt;a href="https://github.com/erri120/rpgmpacker">rpgmpacker&lt;/a> has been one of my biggest non-modding related projects on GitHub and the only reason people visit my blog:&lt;/p>
&lt;img src="https://erri120.github.io/img/posts/2021-11-18/Blog-Performance.png" alt="Top queries of my blog" class="left" />
&lt;p>The developer of the game &lt;a href="https://aura-dev.itch.io/star-knightess-aura">Star Knightess Aura (NSFW)&lt;/a> is the first actual user of this tool and contributed a good amount of &lt;a href="https://github.com/erri120/rpgmpacker/issues?q=is%3Aissue+author%3Aauragamedev">issues&lt;/a> on GitHub driving the development of this project forward.&lt;/p>
&lt;p>With some issues still open I stopped working on this project in April 2021 because I knew I had to rework this tool at some point and didn&amp;rsquo;t had the motivation to do so at that time. I used C++ for 1.x because I wanted to finally build something with this language. I had only done small assignments in Uni with C++ but never done anything more with it, mainly because the language sucks ass.&lt;/p>
&lt;p>C/C++ is old, very old and it clearly shows, not just in the language but the tooling available. Ask 20 C++ developers what build system they use and you will likely get 10 different answers. Working with dependencies is a nightmare when it comes to C/C++ development. It&amp;rsquo;s actually impossible to count the amount of times I wanted to contribute to a C++ project only to be blocked by some weird build system that only work in a specific environment when the stars align and the moon is in the Waxing Gibbous lunar phase. Once you did get something to work you now have to deal with the language itself. Let me ask you this: how do you represent a string in C++? Did you know that there is &lt;code>std::string&lt;/code> which is actually just &lt;code>std::basic_string&amp;lt;char&amp;gt;&lt;/code>, &lt;code>std::u16string&lt;/code> which is &lt;code>std::basic_string&amp;lt;char16_t&amp;gt;&lt;/code>, &lt;code>std::u32string&lt;/code> which is &lt;code>std::basic_string&amp;lt;char32_t&amp;gt;&lt;/code> and &lt;code>std::wstring&lt;/code> which is &lt;code>std::basic_string&amp;lt;wchar_t&amp;gt;&lt;/code> but don&amp;rsquo;t let that fool you because there is also &lt;code>char8_t&lt;/code> from C++ 20 that introduces &lt;code>std::u8string&lt;/code> and don&amp;rsquo;t forget that &lt;code>wchar_t&lt;/code> has different sizes depending on the platform, compiler and time of day.&lt;/p>
&lt;p>C++ is a fucking mess. Working with strings in C++ should not be this hard.&lt;/p>
&lt;p>So lets calm down and look at something different: Rust. I love Rust, it&amp;rsquo;s C++ in way better and more modern. I wanted to rework rpgmpacker in Rust and actually did exactly that for quite some time but soon realized this was also not the way.&lt;/p>
&lt;p>RPG Maker MV/MZ is pure JavaScript with the data files being in JSON. The developers are probably familiar with JavaScript as well so in this ecosystem it is more fitting to create a JavaScript tool. Of course I wouldn&amp;rsquo;t be doing that, fuck vanilla JavaScript, I&amp;rsquo;m using TypeScript.&lt;/p>
&lt;p>I like to use the right tool for the job. Even though I&amp;rsquo;m quite the C# fanatic I went with TypeScript because it makes life very easy. I don&amp;rsquo;t have to write complex JSON parsers or DTOs, I can just do &lt;code>JSON.parse(...)&lt;/code> and access whatever I want. One huge problem was also parsing the plugins for the exclude-unused feature. If you open &lt;code>js/plugins.js&lt;/code> in your game, you will find a variable &lt;code>$plugins&lt;/code>. With TypeScript I can just use the VM to dynamically load this file and access this variable directly. With any other language I would have to read the file as a string and do some complex string parsing.&lt;/p>
&lt;p>Of course there are some problems with TypeScript. I previously complained about the C++ dependency systems but the huge dependency trees you can get when using NPM are also insane. Before I even started on the rework I set my goal to require the least amount of modules which ended up being only 1: &lt;a href="https://www.npmjs.com/package/yargs">yargs&lt;/a> because parsing arguments is not something I wanna implement myself.&lt;/p>
&lt;p>I hope the rework will be received pleasantly by the 3 people using the tool.&lt;/p></content></item><item><title>Don't count frames to calculate time</title><link>https://erri120.github.io/posts/2021-09-29/</link><pubDate>Wed, 29 Sep 2021 16:21:15 +0100</pubDate><guid>https://erri120.github.io/posts/2021-09-29/</guid><description>Time and Frames We have all heard the term FPS, frames per second, which tells us how many frames are rendered on screen within one second. Higher FPS will result in smoother animations because those animations get more frames. The problem with high FPS is that the GPU has to keep up with this demand and be able to produce 30/60/144 or more frames within 1 second. This is where frame times, VSync and a bunch of offer stuff that I won&amp;rsquo;t cover here comes into play.</description><content>&lt;h2 id="time-and-frames">Time and Frames&lt;/h2>
&lt;p>We have all heard the term FPS, frames per second, which tells us how many frames are rendered on screen within one second. Higher FPS will result in smoother animations because those animations get more frames. The problem with high FPS is that the GPU has to keep up with this demand and be able to produce 30/60/144 or more frames within 1 second. This is where frame times, VSync and a bunch of offer stuff that I won&amp;rsquo;t cover here comes into play.&lt;/p>
&lt;p>The important takeaway is that you can not reliably calculate a duration based on how many frames where rendered because not every frame takes the same amount of time. This is a problem when you want to eg smoothly move an object from one position to another. Engines like Unity solve this by providing a delta time &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> which is the interval from the last to the current frame so you can have smooth translations.&lt;/p>
&lt;h2 id="looking-at-rpg-maker-mvmz">Looking at RPG Maker MV/MZ&lt;/h2>
&lt;p>So what issue does RPG Maker have? I have recently played a game for around 21 hours but the save menu displayed over 51 hours, more than double. Actually not just more than double but around 2.4 times more than expected. This quickly made me realize that I had been playing the game on my 144Hz monitor meaning instead of rendering at 60 FPS, the game was rendering at 144 FPS. I hope you notice that &lt;code>60 x 2.4&lt;/code> equals &lt;code>144&lt;/code>.&lt;/p>
&lt;p>To further investigate the problem I took a peek inside the &lt;code>js&lt;/code> folder, did a quick search for &amp;ldquo;playtime&amp;rdquo; and found the culprits of my frustration:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">Game_System&lt;/span>.&lt;span style="color:#a6e22e">prototype&lt;/span>.&lt;span style="color:#a6e22e">onBeforeSave&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">_framesOnSave&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Graphics&lt;/span>.&lt;span style="color:#a6e22e">frameCount&lt;/span>;
&lt;span style="color:#75715e">// ...
&lt;/span>&lt;span style="color:#75715e">&lt;/span>};
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">Game_System&lt;/span>.&lt;span style="color:#a6e22e">prototype&lt;/span>.&lt;span style="color:#a6e22e">onAfterLoad&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;span style="color:#a6e22e">Graphics&lt;/span>.&lt;span style="color:#a6e22e">frameCount&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">_framesOnSave&lt;/span>;
&lt;span style="color:#75715e">// ...
&lt;/span>&lt;span style="color:#75715e">&lt;/span>};
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">Game_System&lt;/span>.&lt;span style="color:#a6e22e">prototype&lt;/span>.&lt;span style="color:#a6e22e">playtime&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;span style="color:#66d9ef">return&lt;/span> Math.&lt;span style="color:#a6e22e">floor&lt;/span>(&lt;span style="color:#a6e22e">Graphics&lt;/span>.&lt;span style="color:#a6e22e">frameCount&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">60&lt;/span>);
};
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">Game_System&lt;/span>.&lt;span style="color:#a6e22e">prototype&lt;/span>.&lt;span style="color:#a6e22e">playtimeText&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">hour&lt;/span> &lt;span style="color:#f92672">=&lt;/span> Math.&lt;span style="color:#a6e22e">floor&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">playtime&lt;/span>() &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">60&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">60&lt;/span>);
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">min&lt;/span> &lt;span style="color:#f92672">=&lt;/span> Math.&lt;span style="color:#a6e22e">floor&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">playtime&lt;/span>() &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">60&lt;/span>) &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">60&lt;/span>;
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">sec&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">playtime&lt;/span>() &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">60&lt;/span>;
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">hour&lt;/span>.&lt;span style="color:#a6e22e">padZero&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;:&amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">min&lt;/span>.&lt;span style="color:#a6e22e">padZero&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;:&amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">sec&lt;/span>.&lt;span style="color:#a6e22e">padZero&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span>);
};
&lt;/code>&lt;/pre>&lt;/div>&lt;p>A quick explanation: whenever you save, the game includes the amount of frames it has rendered in the save file because &lt;code>Game_System&lt;/code> is serialized in the save file and &lt;code>_framesOnSave&lt;/code> is a field of that object. Of course when you load the save will get deserialized and &lt;code>Graphics.frameCount&lt;/code> will be set back to that value. In case you are wondering: &lt;code>Graphics.frameCount&lt;/code> gets incremented on each render.&lt;/p>
&lt;p>This is fine so far but the real problems are found in the &lt;code>playtime&lt;/code> and &lt;code>playtimeText&lt;/code> functions where the game assumes you constantly playing at 60 frames per second. The pure &lt;code>frameCount&lt;/code> gets divided by &lt;code>60&lt;/code> to get the amount of seconds passed and in &lt;code>playtimeText&lt;/code> that result is further processed to the get hours and minutes.&lt;/p>
&lt;p>Due to the multiple issues outlined at the beginning you can see that this is not a good idea. Having said that: let&amp;rsquo;s look at how to fix this.&lt;/p>
&lt;h2 id="possible-solution">Possible Solution&lt;/h2>
&lt;p>This solution is probably the easiest and most straightforward one I can think of:&lt;/p>
&lt;ul>
&lt;li>on load/start: set &lt;code>startTime&lt;/code> to the current time&lt;/li>
&lt;li>on save:
&lt;ol>
&lt;li>get the current time and calculate the difference between now and &lt;code>startTime&lt;/code>&lt;/li>
&lt;li>add the difference to a variable in the save&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;p>No need for frame count calculations or anything complex, just use &lt;code>Date.now()&lt;/code> a few times and get the difference.&lt;/p>
&lt;h3 id="changing-the-implementation-in-rpg-maker-mv">Changing the implementation in RPG Maker MV&lt;/h3>
&lt;p>Start by opening &lt;code>js/rpg_objects.js&lt;/code> and look for the &lt;code>initialize&lt;/code> function. Here we want to add two new fields:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">Game_System&lt;/span>.&lt;span style="color:#a6e22e">prototype&lt;/span>.&lt;span style="color:#a6e22e">initialize&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">_startTime&lt;/span> &lt;span style="color:#f92672">=&lt;/span> Date.&lt;span style="color:#a6e22e">now&lt;/span>();
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">_playtime&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#75715e">// ...
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Date.now()&lt;/code> returns the current &lt;a href="https://currentmillis.com/">Unix time&lt;/a> as an integer that looks like this: &lt;code>1632928643900&lt;/code>.&lt;/p>
&lt;p>We need to set the start time in the &lt;code>initialize&lt;/code> function for when the game starts and in the &lt;code>onAfterLoad&lt;/code> function for when the player loads a save file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">Game_System&lt;/span>.&lt;span style="color:#a6e22e">prototype&lt;/span>.&lt;span style="color:#a6e22e">onAfterLoad&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">_startTime&lt;/span> &lt;span style="color:#f92672">=&lt;/span> Date.&lt;span style="color:#a6e22e">now&lt;/span>();
&lt;span style="color:#75715e">// ...
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>onBeforeSave&lt;/code> function gets called before the save is serialized so here we have to calculate the time difference and reset the start time:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">Game_System&lt;/span>.&lt;span style="color:#a6e22e">prototype&lt;/span>.&lt;span style="color:#a6e22e">onBeforeSave&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">_playtime&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> Date.&lt;span style="color:#a6e22e">now&lt;/span>() &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">_startTime&lt;/span>;
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">_startTime&lt;/span> &lt;span style="color:#f92672">=&lt;/span> Date.&lt;span style="color:#a6e22e">now&lt;/span>();
&lt;span style="color:#75715e">// ...
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Assuming the player started at &lt;code>1632928643900&lt;/code> and played for 1 second till &lt;code>1632928644900&lt;/code>, &lt;code>this._playtime&lt;/code> will now be &lt;code>1000&lt;/code>. The only thing remaining is updating the &lt;code>playtime&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">Game_System&lt;/span>.&lt;span style="color:#a6e22e">prototype&lt;/span>.&lt;span style="color:#a6e22e">playtime&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;span style="color:#66d9ef">return&lt;/span> Math.&lt;span style="color:#a6e22e">floor&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">_playtime&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">1000&lt;/span>);
};
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Since this function returns the amount of time passed in seconds we have to divide by 1000 to convert from milliseconds to seconds. While we are at it, I also recommend updating &lt;code>playtimeText&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">Game_System&lt;/span>.&lt;span style="color:#a6e22e">prototype&lt;/span>.&lt;span style="color:#a6e22e">playtimeText&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">secondsPassed&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">playtime&lt;/span>();
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">minutesPassed&lt;/span> &lt;span style="color:#f92672">=&lt;/span> Math.&lt;span style="color:#a6e22e">floor&lt;/span>(&lt;span style="color:#a6e22e">secondsPassed&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">60&lt;/span>);
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">hoursPassed&lt;/span> &lt;span style="color:#f92672">=&lt;/span> Math.&lt;span style="color:#a6e22e">floor&lt;/span>(&lt;span style="color:#a6e22e">minutesPassed&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">60&lt;/span>);
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">sec&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">secondsPassed&lt;/span> &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">60&lt;/span>;
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">min&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">minutesPassed&lt;/span> &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">60&lt;/span>;
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">hour&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">hoursPassed&lt;/span> &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">24&lt;/span>;
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">hour&lt;/span>.&lt;span style="color:#a6e22e">padZero&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;:&amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">min&lt;/span>.&lt;span style="color:#a6e22e">padZero&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;:&amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">sec&lt;/span>.&lt;span style="color:#a6e22e">padZero&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span>);
};
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The main difference here is that we cache the result from the &lt;code>playtime&lt;/code> function and other operations.&lt;/p>
&lt;h2 id="afterword">Afterword&lt;/h2>
&lt;p>This issue has been bugging me a lot during my playthroughs of longer games because you don&amp;rsquo;t really notice it when your playtime goes from 1h to 2 hours but going from 21 hours to 50+ hours was a bit more in my face. RPG Maker MZ also doesn&amp;rsquo;t fix this and I have not seen any discussion about this.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>See &lt;code>Time.deltaTime&lt;/code> in the docs &lt;a href="https://docs.unity3d.com/ScriptReference/Time-deltaTime.html">here&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></content></item><item><title>Utilizing Image Steganography in Games</title><link>https://erri120.github.io/posts/2021-01-27/</link><pubDate>Wed, 27 Jan 2021 10:08:08 +0100</pubDate><guid>https://erri120.github.io/posts/2021-01-27/</guid><description>Image Steganography is nothing new or ground-breaking, it existed since 440 BC 1 and digital steganography started appearing once personal computers became a thing. This little post is about the methods used by Illusion for their games &amp;ldquo;Koikatsu!&amp;rdquo; and &amp;ldquo;AI Shoujo&amp;rdquo; and the benefits it provides.
Character Presets and PNGs Most games by Illusion are sandboxy, they have an active modding community provide an extensive character creation tool that can export your preset.</description><content>&lt;p>Image Steganography is nothing new or ground-breaking, it existed since 440 BC &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> and digital steganography started appearing once personal computers became a thing. This little post is about the methods used by Illusion for their games &amp;ldquo;Koikatsu!&amp;rdquo; and &amp;ldquo;AI Shoujo&amp;rdquo; and the benefits it provides.&lt;/p>
&lt;h2 id="character-presets-and-pngs">Character Presets and PNGs&lt;/h2>
&lt;p>Most games by Illusion are &lt;em>sandboxy&lt;/em>, they have an active modding community provide an extensive character creation tool that can export your preset. I come from Skyrim where exporting a character preset created with &lt;a href="https://www.nexusmods.com/skyrimspecialedition/mods/19080">RaceMenu&lt;/a> results in a JSON file full of instructions for the mod but not for the user. If you were to just give the JSON file to someone they won&amp;rsquo;t know how the character looks until they start the game and load the preset. This means you have to include screenshots and the JSON file but that makes Discord preset sharing channels very cluttered.&lt;/p>
&lt;p>So what does Illusion do? They just give you a single PNG file:&lt;/p>
&lt;img src="https://erri120.github.io/img/posts/2021-01-27/Mona.png" alt="Mona Preset" class="left" />
&lt;p>If you own Koikatsu! then you can just download this image, put it inside your preset folder and it will just work in-game. Of course I immediately opened a my hex editor of choice, &lt;a href="https://mh-nexus.de/en/hxd/">HxD&lt;/a>, and looked through the data to find what was going on:&lt;/p>
&lt;img src="https://erri120.github.io/img/posts/2021-01-27/preset-in-hxd.png" alt="Mona Preset in HxD" class="left" />
&lt;p>It turns out that the data for the preset was appended to the end of the PNG. As you can see in the preview above, this does not affect the render in any way because the parser will just stop at the &lt;code>IEND&lt;/code> marker. I found out that FFmpeg does not like this extra data at the end and tries to parse another PNG instead of exiting:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-txt" data-lang="txt">[png @ 000001f2aeb65500] Invalid PNG signature 0x6400000012E38090.
[png @ 000001f2aec0e2c0] Invalid PNG signature 0xE300000081A76C73.
[png @ 000001f2aec11500] Invalid PNG signature 0xA946616365556E64.
[png @ 000001f2aec0fd40] Invalid PNG signature 0xA74579654F766572.
[png @ 000001f2aec10940] Invalid PNG signature 0xD928636F6D2E6765.
[png @ 000001f2aec10140] Invalid PNG signature 0xC2A963745F676C6F.
[png @ 000001f2aec11100] Invalid PNG signature 0xC3AE63745F73686F.
[png @ 000001f2aec10540] Invalid PNG signature 0xCC6001D023D8950.
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="rewarding-simplicity">Rewarding Simplicity&lt;/h2>
&lt;p>You might think &amp;ldquo;&lt;em>So what&amp;rsquo;s the deal?&lt;/em>&amp;rdquo; and that is the point: it is simple to implement and a good solution to the problem of sharing presets, however it is not apparent.&lt;/p>
&lt;p>I hope you found this somewhat interesting, if you work on a game that has presets and you don&amp;rsquo;t know how to export them, maybe this has sparked your interest and provided a solution.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>The first recorded use can be traced back to 440 BC in Greece, see &lt;a href="(https://en.wikipedia.org/wiki/Steganography#History)">Wikipedia&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></content></item></channel></rss>